{
  "openapi": "3.0.0",
  "info": {
    "title": "WebShop24",
    "description": "This is the best WebShop you can find.\n",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  },
  "servers": [
    {
      "url": "https://petstore.swagger.io/v2"
    }
  ],
  "tags": [
    {
      "name": "buyer",
      "description": "Everything about buyers",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "seller",
      "description": "Everything about sellers",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "article",
      "description": "Everything about articles",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "order",
      "description": "Everything about orders",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    },
    {
      "name": "cart",
      "description": "Everything about shopping carts",
      "externalDocs": {
        "description": "Find out more",
        "url": "http://swagger.io"
      }
    }
  ],
  "paths": {
    "/buyer": {
      "post": {
        "tags": [
          "buyer"
        ],
        "summary": "Create a new buyer (registration)",
        "operationId": "createBuyer",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Username already taken"
          },
          "201": {
            "description": "Buyer created",
            "content": {
              "application/json": {
                "example": {
                  "_id": "cWGtlAnhcsVViidg",
                  "username": "Zascosium",
                  "password": "Test123#",
                  "firstName": "Tarek",
                  "lastName": "Bürner",
                  "email": "test@test.de",
                  "address": "Leiser Weg 12"
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "buyer"
        ],
        "summary": "Get all buyers",
        "operationId": "getBuyers",
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Buyers returned",
            "content": {
              "application/json": {
                "example": [{
                  "_id": "cWGtlAnhcsVViidg",
                  "username": "Zascosium",
                  "password": "Test123#",
                  "firstName": "Tarek",
                  "lastName": "Bürner",
                  "email": "test@test.de",
                  "address": "Leiser Weg 12"
                },
                  {
                    "_id": "cWGtlAnhcsVViidk",
                    "username": "Zascosium2",
                    "password": "Test123#",
                    "firstName": "Tarek",
                    "lastName": "Bürner",
                    "email": "test@test.de",
                    "address": "Leiser Weg 12"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "/buyer/{buyerID}": {
      "get": {
        "tags": [
          "buyer"
        ],
        "summary": "Get Buyer by BuyerID",
        "operationId": "getBuyerByID",
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Buyer not found"
          },
          "200": {
            "description": "Buyer returned",
            "content": {
              "application/json": {
                "example": {
                  "_id": "cWGtlAnhcsVViidg",
                  "username": "Zascosium",
                  "password": "Test123#",
                  "firstName": "Tarek",
                  "lastName": "Bürner",
                  "email": "test@test.de",
                  "address": "Leiser Weg 12"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "buyer"
        ],
        "summary": "Update Buyer",
        "operationId": "updateBuyerByID",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Username/Password mismatch"
          },
          "404": {
            "description": "Buyer not found"
          },
          "409": {
            "description": "Username already taken"
          },
          "200": {
            "description": "Buyer updated",
            "content": {
              "application/json": {
                "example": {
                  "_id": "cWGtlAnhcsVViidg",
                  "username": "Zascosium",
                  "password": "Test123#",
                  "firstName": "Tarek",
                  "lastName": "Bürner",
                  "email": "test@test.de",
                  "address": "Leiser Weg 12"
                }
              }
            }
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "buyer"
        ],
        "summary": "Delete Buyer",
        "operationId": "deleteBuyer",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Username/Password mismatch"
          },
          "200": {
            "description": "Buyer deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/seller": {
      "post": {
        "tags": [
          "seller"
        ],
        "summary": "Create a new seller (registration)",
        "operationId": "createSeller",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "409": {
            "description": "Username already taken"
          },
          "201": {
            "description": "Seller created"
          }
        }
      },
      "get": {
        "tags": [
          "seller"
        ],
        "summary": "Get all sellers",
        "operationId": "getSellers",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Sellers returned"
          }
        }
      }
    },
    "/seller/{sellerId}": {
      "get": {
        "tags": [
          "seller"
        ],
        "summary": "Get Seller by SellerID",
        "operationId": "getSellerByID",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Seller not found"
          },
          "200": {
            "description": "Seller returned"
          }
        }
      },
      "patch": {
        "tags": [
          "seller"
        ],
        "summary": "Update Seller",
        "operationId": "updateSellerByID",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Username/Password mismatch"
          },
          "404": {
            "description": "Seller not found"
          },
          "409": {
            "description": "Username already taken"
          },
          "200": {
            "description": "Seller updated"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "seller"
        ],
        "summary": "Delete Seller",
        "operationId": "deleteSeller",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Username/Password mismatch"
          },
          "200": {
            "description": "Seller deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/article": {
      "post": {
        "tags": [
          "article"
        ],
        "summary": "Create a new article",
        "operationId": "createArticle",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "201": {
            "description": "Article created"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "article"
        ],
        "summary": "Get all articles",
        "operationId": "getArticles",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "200": {
            "description": "Articles returned"
          }
        }
      }
    },
    "/article/{articleID}": {
      "get": {
        "tags": [
          "article"
        ],
        "summary": "Get Article by ArticleID",
        "operationId": "getArticleByID",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Article not found"
          },
          "200": {
            "description": "Article returned"
          }
        }
      },
      "patch": {
        "tags": [
          "article"
        ],
        "summary": "Update Article",
        "operationId": "updateArticleByID",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Username/Password mismatch"
          },
          "404": {
            "description": "Article not found"
          },
          "409": {
            "description": "Username already taken"
          },
          "200": {
            "description": "Seller updated"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "article"
        ],
        "summary": "Delete Article",
        "operationId": "deleteArticle",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Username/Password mismatch"
          },
          "200": {
            "description": "Article deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/order": {
      "post": {
        "tags": [
          "order"
        ],
        "summary": "Create a new order",
        "operationId": "createOrder",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Failed user validation"
          },
          "201": {
            "description": "Order created"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get all orders",
        "operationId": "getOrders",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Failed user validation"
          },
          "200": {
            "description": "Orders returned"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/order/{orderID}": {
      "get": {
        "tags": [
          "order"
        ],
        "summary": "Get Order by OrderID",
        "operationId": "getOrderByID",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Failed user validation"
          },
          "404": {
            "description": "Order not found"
          },
          "200": {
            "description": "Order returned"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },

    "/cart": {
      "post": {
        "tags": [
          "cart"
        ],
        "summary": "Create a new Shopping-Cart",
        "operationId": "createCart",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "201": {
            "description": "Cart created"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    },
    "/cart/{cartID}": {
      "get": {
        "tags": [
          "cart"
        ],
        "summary": "Get Shopping-Cart by cartID",
        "operationId": "getCartByID",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "404": {
            "description": "Cart not found"
          },
          "200": {
            "description": "Cart returned"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "cart"
        ],
        "summary": "Update Shopping-Cart",
        "operationId": "updateCartByID",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Username/Password mismatch"
          },
          "404": {
            "description": "Cart not found"
          },
          "200": {
            "description": "Cart updated"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "cart"
        ],
        "summary": "Delete Shopping-Cart",
        "operationId": "deleteCart",
        "requestBody": {
          "$ref": "#/components/requestBodies/Buyer"
        },
        "responses": {
          "400": {
            "description": "Bad request"
          },
          "403": {
            "description": "Username/Password mismatch"
          },
          "200": {
            "description": "Cart deleted"
          }
        },
        "security": [
          {
            "basicAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "petId": {
            "type": "integer",
            "format": "int64"
          },
          "quantity": {
            "type": "integer",
            "format": "int32"
          },
          "shipDate": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "description": "Order Status",
            "enum": [
              "placed",
              "approved",
              "delivered"
            ]
          },
          "complete": {
            "type": "boolean",
            "default": false
          }
        },
        "xml": {
          "name": "Order"
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Category"
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "description": "User Status",
            "format": "int32"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Tag": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Tag"
        }
      },
      "Buyer": {
        "required": [
          "firstName",
          "lastName",
          "email",
          "password",
          "address",
          "username"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "BSON",
            "readOnly": true
          },
          "username": {
            "type": "string",
            "example": "Zascosium"
          },
          "password": {
            "type": "string",
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=!]).{8,}$",
            "example": "Test123#"
          },
          "firstName": {
            "type": "string",
            "example": "Tarek"
          },
          "lastName": {
            "type": "string",
            "example": "Bürner"
          },
          "email": {
            "type": "string",
            "example": "test@test.de"
          },
          "address": {
            "type": "string",
            "example": "Leiser Weg 12"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "pet_petId_body": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated name of the pet"
          },
          "status": {
            "type": "string",
            "description": "Updated status of the pet"
          }
        }
      }
    },
    "requestBodies": {
      "Buyer": {
        "description": "Buyer, that should be registered",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Buyer"
            }
          }
        },
        "required": true
      },
      "UserArray": {
        "description": "List of user object",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/User"
              }
            }
          }
        },
        "required": true
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}
